from cryptography.fernet import Fernet


# encrypted MongoDB Info x7 times
R0L = b'gAAAAABfuwtLfMm9D8yoee6XQ3oAG1lO_4PPCBUhD34x1Ds5ZbiMxoDgb055iSQ2gjL_x3xa5Y0knYYIH-2EdS6lcK7zyx9hW2wkAUzF7kRhxzRpp77BlTHe9W6ZpMJLZCBSWWG4xXWNzWkNcVZVY7wLPY1qMpq8Lj4TKdD4winsqfKKkZpd4neDUlFd3LLGBDW7_RwtFFa9PFdw3u2UzHQ0OD9_LDCLKPQFCHqxlX_7loKU9j8y03jQwfcY3Fm_e9o5I4gVIvtFs62i1q8lwTkVwg0ZKDTMcsRiRdSAUk762731W2kpmaJMlgRDMQRlZpQyjGCYNXER4pl_dU9wQHm7-rnaXLkux626Mc7yzBvW03qUNU7cj7YnA_RsjPVlbM9UVfAzAc8bExjg9LXkoeIQOx1pucHikT901LbKa8AqC3lngN7LJxEntcYxPlSS_nbjT2l18r2PBrtkaZy8RmJ3xq4Zy01UwoD3QE9K5F46M1HLtR9-3BNRhCQ6fhQkiJjk08IKqqyI7QjRenfoEvWE3dNuwne8onqwxp78fFrARlQJIJ0zx6YK-dpDWqm1bb3oTjwhD9C-7fN_4O32n5bJqncq-UwC6aD-3GcQXuv3JcBk9l2y3rDktk_NAWUbp4oWKFZz9us4hB0c5X2m77tZ4Ir-nAYCZRAcAS6gLZcFXs2mJ67XcISrudtCiECnoRhJhx-f0il2DY9BF4gM_PUcJpzfNNLfLr53UOatSVSXma-EHS66TRFhOE2cb3RhvxlQ7JLtbio--GO9hwXdqxgVhN6HQOrWHCMiqM775VXIPgB6icfVT5XkLhTZ09dT34AsMsG2TKcQAQpRMASxB0_OTcaD0hrYTMWyrl5z8V34GQRaSsxVIxz6og-sMW997qmoO96r6VXjyw7OJQDVy90u-88chfGB2hWLf80u0-bV9zS2MUOCzTXmUS772A78-B6qv_tR_gaTOWGYX1KhsrCh3KU3aJ0hsog09AeOqBsKv1-oVFOiD5_b0qSvmaJvWX6RdCJHvXiO2k57BJT5A9K96JuPGO6OBJHTKGSVFN_5mdi13sRQS8iM8Xih6zBRa_ScxQR5_Nf_oCCjmb89uea5DTRi1Ax54I1M6dzWEX20CNL5zuUf3kreoQTmmHII4R3GsWB5SBq22lGrtDwt1-bmLqS0nflo1R4UOtfC3qBxgK-I-evsaaKepQYMJ5pgT8-a7E6xkK5SuwpCFRjxyHk2YcvHnUJTGsQWCNUbxfZfVt_2lJpt4A_9j6epRaKIHKK7kctXHgIRcpzGGzF5Y52dRDCp4q1iQXXZqpqcjb15YZVSSEGxcQMTGCCZyoJh2UIJtCRTc9gY2Sivm2v8slr8j-dGpKHvfq6N-KUcod6rS8F-TtL-vy_FOQ5YnMVbf_pP7bEVdOjVZvlINF4_15IH7P2CqTp5BMEehgtdrlBdUqf7hxF4f2OSKfcypdO2xyZ_XolfddyzBzapRHUPEU4Tplu1Dv6mYhOmRe3NlUeX4bNt7T4bEj3sgRK5maNo7vi5sq9XmXDXRTUYHi_4FORhUqYpgpQxVF_Uy6JpDYb-fNsCjW7RfWVrs5GTqFbuKqpUhUil0NT7-kVx5uW9KcV1av_B2vJ4Y9UzcHd-rUKGJTAIM7PYhCQuomVBUY2OBoyYj9TFsUu97k99LDkKpQyye7ee0odKQ0-EQbFjNLgTRupVL3IEDJzTdGV8Uf6DdaC-XCQHhjeSmBK4KPttejK-9oIBb7pHWMdQ0kyTXAnl9Z7-fZ2a_AzrFKEfF9aANYXLaS7kFQRe'
R0P = b'gAAAAABfuwtLApaGa_cU5onhiE9uCS5PyxzzDTUuYf6eLJXOsMS74Y0ahSrPrmSOBzXPEmLKWtZuBabb4D00H7ybZPDOpUf2y5WFSz1HDkOqWSSmg_5oObclzf53cFGoeUS99m4mQA-5zmkhWPZVIKSjOT6oV6fMey5M4_8Qr2iwzRex2RlSc7CeanVdMIu4OF1rGenzRDgOyUeW-bFSR3DDazUeEL7P9OQc6MhQVNXZmZN-Eciop6LPDRxTvC1nyBaIOVohLPI6B4q2JomhB7RC6bl0NrZmxQ10fs4OGxDjCl78_mLddRQZiRtpKSY3b1IIWS5mCHFEotFEGKQC6oUOPKiLYzIbskJZN8Xe5U_I4Nu9mnmIBCfiXw2iDyxEeNkUUfnACU_OMLLyd8o6k815xEaSnsDA9-8-xcNxzFtOHiw0Tg35FqBHUqK4sIVXSmlGBbQTyFqaDQdwv-JEPUyOumkl8vdbpzR9CIsRV3FuxWH37VMMc0iFeGlhkZWU3L2PDqXjANwebPyoweWI6JhHmq1uWCzzaC4Qx2VnPvX5WOr4BFMTYMcENJsIBYrvQ65WjMxyCMhUiaUTei4Gbi8VGQwy8q-5Y_tXMVtXQKPUU0gKELGpUqkRQWQFlAJuYssPpcjVA9bcKdXXibAUgme9XH8wkCiyWMxyqigkacFNalnsGxjWsEviPev8q3ZiMi_gFFBJnGIp12wOjBH2WcruLfNbnG02tU96--xNCi_UX9UAHOhSmqMyM5lI8qrUqNOzq2m6Kw-YrH-QGk_hnjtLn6-NrEb2aBDNqsipnElSOtlIGAOywFWRGBi6LzjSRkKwe_Fp8yh3UgpsaSQi9SR31VBT6xyCgVch11CffOSSbd-ac3g5B4UdohRr75n3dBQhlp-RAVrSf_TNrNSdG945JvVglKSQFtbekMzu3WixFwRDefh7RTk29tcFxA1ab5WSWh1greUcbBQ7c6rlnpGrxFyYroKUPQ5oT9_IsWHxyzrndk8MbNA0MLes2gLz1NBXXF-lmzyNk7NOZ-rpyNYhiUb-gyTeDXIw04HQxwTLWvUGZQ6ZW5LPPJAYLnCMKrgSqYsuy_wVFktelL4vSpAzSR6h2IsnJrZ2GH9A792QhMwEmIQDUl0JzyccGRFSJmoE9-SN5WJ9TfL_-DBqFLNt7PeWm2RsNJ_hTtDZiQ5NHW7sPLJ4ZIe7jXVywFoQNSsfyCmVxdIWja7eZ4Cm-zlocWkxxUemCP8xIOgrdtsnoDfgQ3mOY0JUF_g9-RP4XoNkiQtvYkSe9e9c-N0nGXq1hk9pk0R2oRJLjYSMRwl5X-AzXOHrqdRdFNJ5UT6Sx3nHyuFslQdj_Xy1jBoSiQGGNFXYya9lm_kqEddzctOsQxvGqqQYoOwbbKxWM4rdiRsz0DEQqul28fUuaZpTplhqE8R7p1vLY2Bmvk0TwbplknIgdnWdqJkiJoOD_is489IGn1BV7Ch1qDSmYkAq9JggkJd8kUTaO9QPT8RACrejl2uZjntLWneVnOkVLN9TFoI4rFdKAtT02VaBYg2kz35wjPBfv5oQpDyYa_IXsL2YnoetQTpZvwNXg4T482a6saludBiIVSjo5pNoaWfVjICNsF0-Q02taWFTkNg-6-cVcpQgvz7ptcDKu3swrTeVo4N-F2O_2WSVY9lDArSPpTSed2qSJUPcDbi6rchrr45kDJ-LcQnelTmiKYaIqwjnv33wDLO-La1mYM4bdPXyxmmAhhZ-d85rbsKbYkjoYve8Yo5E5x-mQWFYzamzeEoZjBrR4h2WtrwN'
R0O = b'gAAAAABfuwtL0svcS7t5lbBrl7UGoxr6ZdQRohoDADhGetITcYpsQP_Ha1lXZVXvU9_u5u0M0SjdSBvostKHVVwlzV7ncBYAIrVS3ozENvyl9EMVD3T9cvyizG6aHMDCv7T5Gajz5IMRomjLMFgvF72_7yQQ3xkkTsB0nfmha0mU0t64967YmQkLDptgxX2-upZpmrqdnsxlZPYUFuljmOIFyyIZ9a3jDdxIrGj2hhb6chaYWFBXynmCmEzS9-peDf6T1yjVNRhCUyI9eYt2x0GyhNOS_rkLCVu3U_Ai0Sh5urIgIlbZaaRdXS23UGft45n8wME3UTzkbzr61Adl1d2VS9pAi-g7izw2FSLpDrWPSs-HPZGg4XR_-FYj0V63Ylfqs8empskln6UDcJJFQTfe_IH3-4j_hK7HuhVIT7aaFdV6PIqq0hnr_3X5fE38FcP75_Q-S6IHtnrVOyLIAQyrEf05UV37niU4w5-b6f5QUP0KLT91WfpAlsauD_R6t8hJoaL-owe5ovbXr0jnYX4FDy3GjsFqkLSjbeobtAJvPub_uz6RdXI8fuTDOolSp9S-78bFFHhE5CyqPPB2BAlUnL4zwXl8MEbnrXWzymUzOmOJNwUsf6yT0_z27SFYgm1ov1eQN04wG9_0OaxB-YMuTscZPBaTiHHKv9lcgAuflaW32E0w1PwoOK1_rMTQ5N2jLwvSmPoHa9lK8Sm_d09yD_Z9lntwfzEYXzDceuovafLykxsOr-xBWDykWxQB0foEoTiH1xaCxinCYwMDty6BNucq_ZDQkjG7YbmlJw5aV8cOY22I0OuxirYOY5ewc80eqaU1lWIoC8PD4uMdcEPsu14gqLvbTUcdTyMVe1qoDrswucKZ-1qYSdIH9FVMT8FB84BZ_WTC4VRMuoVjb0Uc1SicprKunqi1jgWOsAB3L6Meyngt_FIFgCrmGXwtY9uMEtDKtebFzE81hkAA8tq0hrJR9uNIt6v1OidiJAyeA9VX2kO5Hzmoth8p_w0tN0ExtX4UzDyvJX_oAMECF7_OUHULAOHQ2AqJjaDPk-TX4Jxtmxf4GdEv-xl2uTnl8BwDb1i8o8_rwfiAmHw61ucKRDiLO0um5IYkCrf9MIx7WzdOfOkGtO3hjsw0RbNlVOXgE_fyUAkoTmX7Ksx8UAvuJslnW8ReaYVKoogNf5OGnE4VEMk6Mo6eu0a0ZKHeaBG4AvvNl0aRWV6t5RJnWTMShRJ0uGrwChKeGGQv7hKyJ5NJA9asf98fa9eUGe7EN5_QjbqT0RuU99jfaoKMmszMeL0yqU9bB7c7qOIwlZK4rT9RMWxt_KkrLQB7K3iaCJ59jXfi4H7Elp_jOG77pUiwFEyOMwLbGTTEaUoxK2rgQaklT39lp7VlSm9-7fqOT6EzFUrHm7rLqrni0oDgK2yDQTWuGfptiNkeMNu70QJEhBZhKXHy_3nK3oXeKHgrhf-HY4QM8_giXAruFDOo3cQyheCno7raTnpIQA5-yr3JlUJFM8wuIDcKDrmxfx5-Vw7-7bNTiDGQWpqI8X-8R7RLPMzAAOk_9Ptkjk0oEHttHaLGiukW7uDTlBT1W2OJtpXTZ5WA_3ld3WV-ClWKMS_9Sww3p4Tcss5jPvfYv-7zLP_yuAi4b0M6wwIPhuAbnAUrmiGMNLOWSumF1q3a8AGeHS_giGbnee8ggKroUAbwkQE2AEdhxPa3ScTjMqlJERtq-zVQY3LQWAEtVyePMF4R27xMvEysX12pANazdxv7fK3b7J3x5XygzaoTGZVORaJtm3fcktVNjyTfZO_3myPVXSsyT5pmHNwAEpnPDYrHXhd5GN1T1BNio39mvbT5gPU_J72NheitIm8GJo4w8kUbV3kDkVv2-w=='
R0DN = b'gAAAAABfuwtLL20raBVD88FEReX0Pgf1454VQRYUN7tQEzdn6P_E1_at-DBQ9hrUk2rDTTU5F0Ly8r35XRfvZjQ7nu4evJvEAECKjpMR8UEsBKuYkoqnSczesWiSObD2RbRnuYRYW6jftel7vJJDz42p4h0h7qSmkf6162EHB3Xnn4AmB5wYz-VzUuh4oi-XnJmdYz_PdCthj9xFq8FyR-msvBzno0Yh4yM9gXLXMh6T6VWEU_mCD1N5ppcnmBbw2oJ_43QOnsQ-vBai5ve4Lbh8E-tWql363jLOYSi4BMzkw-l2vTkAa_kB243ks8HdWqNHjr102YGgMIxySu7ZXLggQ95WqSyV167rcML6CMSD-dFiBSbvrvVbf2sd-9yWRyeeB1yN6cnY1mXzl6fzzdV_29g3n11N0m13iT2z2WjTaCytDillbNnB4lf4BKsoKyktb2rS5e0CwN_YOUbo-NLaSeTT6RCMuQxI7vBC6FbjQ1WVtufMvzVSUqeI7Uf7sXPUc8crupRV6aV482KUivYdiVmHhEArq78x_26szoOhaNMUyxTtTJ8bDyRbrWhg8A9mJS0LcdTMH-6DUeyVbLsADSPz_q3Mo_pk6xbuWR-BZU49iE85CF-3Wha6_L9EfaRS0zf7kbtFgopuIy-910VuBMOy-cFSmLw7xt-pfocFNUyCE9bY_A9rcqqYzGKW7M0LbmG34oc9sQpIl0v5WcKrQzGOOo1nXmpT2bq7HbUN-FCosw6jR1zWx4TVTb4qcr06xba-pllWX4GKyJb47J7jFSmJLBCCKkfschXO9NdcTt7qU9jwagb4eJ0DBxiBWQH0j_e6V6iG_3MHPJVoo-9Zoi1TAMNM7sgvLIU6vnuyyxuORXv-mS9DonYwyra_AnrkyhF7QXxPZKCejmquB1H6BWy6kSD77sIazBV4vClSVEls523nRFtjqYORCBtFOYjEl4YcQ__1PtGQGFZ9dlZlYYPnmqSiusFG4uEjeNS0wBJfeX1Yg8fZhPJ6PnX9NdYBaJvu7SDx8EtGDxHjkWG5Ct74Ni1GcSgL0V9WdzId2pKITrfnukJmzYLxM8bv4pZOooKrWOVzDPQuWorDgpzhzu9NvxcLx044zdHhkEqE2Ftjxk7dmbyy_tNh96hhhROseRHpBWQrk8CLN0xSq487_PswpfsSm4LHCcLoqWEqa2b6AEpqIN70NQFRFmnaKYn5CRSVCS0A9OrRQaH_Djby48vZYBnLpmKY3WbwFEFnKD0kZOaIV7OtWrD51LpLjtoCpGg3_3SK4sQI0PLAcHcy19Vg0od3H-uDZMBRyhHacRi2V_q7uV8jMZ4U61tPgvF4iNjSJSHmSaUySbfRizMUcA9HQiriGsYBdYBZcU0xjOyffChA_UXkDGxiI84rt9lgNQBNN2HGB6im_q1BcRVeW-1yFHWtiitZiA2vCbxzNvXBCLiRZAPQufuoKFq_tRJsSDWBqEK9-1U1jZFdW5SVc8TykSKtGgGxKWW15qlF7ecPt6PG-XWN2QWjiAv3_AhqywcinlU-313wta-yIV218LoYnIRfPUjkkJlAwxlYhIq3at1MJGStp-wYyzBOS5qBI8XvRg1kU60Em8KbVf0DqUaLb-TXpQsXTXxY-yl6rerMIZgsQfC_A8PMJsUekJ8Ebnt3SAaHJ9z4qq9L2WcbzNJYqqSbEUs9ZibHDATsYgl7lcJV6B1QPXvgCKYJqWo4LonA4s2j8LfINfcEKMzyV1Wrz7Th6O1Z_Rw66cAIg3SYa7crZNy7KPM2I7o9KxjpQ4TgnH1D'

gottenList = []


def getList():
    # encryption key file
    with open('FileControl/Resource1.ext', 'rb') as file:
        secret = file.read()

    cipher = Fernet(secret)

    # initial decryption pulls encrypted data from variables
    encrypted0 = cipher.decrypt(R0L)
    encrypted1 = cipher.decrypt(R0P)
    encrypted2 = cipher.decrypt(R0O)
    encrypted3 = cipher.decrypt(R0DN)

    # while loop iterates an addition 6 decryption steps for a total of 7
    i = 0
    while i <= 5:
        encrypted0 = cipher.decrypt(encrypted0)
        encrypted1 = cipher.decrypt(encrypted1)
        encrypted2 = cipher.decrypt(encrypted2)
        encrypted3 = cipher.decrypt(encrypted3)
        i += 1

    # converts byte data back to string data
    encrypted0 = encrypted0.decode()
    encrypted1 = encrypted1.decode()
    encrypted2 = encrypted2.decode()
    encrypted3 = encrypted3.decode()

    # list assembler for login data.
    gottenList.append(encrypted0)
    gottenList.append(encrypted1)
    gottenList.append(encrypted2)
    gottenList.append(encrypted3)

    return gottenList